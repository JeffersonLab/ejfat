The 2 programs, udp_send_order.cc and udp_recv_order.cc send and receive packets.
They can communicate directly with eachother if, in ejfat_packetize.hpp, you comment out the

#define ADD_LB_HEADER 1

line near the top of the file. If, however, you want to use this with the ejfat emulater,
it must not be commented out.

The ejfat emulator is lb_emu2.cc which is mostly the same as emulation/lb_emu.cc except
for a few small changes that clear up C++ getting confused as to which "bind" to use.
It also writes and parses the header without bit fields. But that doesn't seem to
affect anything.

Most of the hard work is done in ejfat_packetize.hpp and ejfat_assemble.hpp.
These 2 files are copied over to ersap-ejfat for implementing the packetizing
and reassembly services and engines.



NOTE on MTU

It turns out that the ethernet MTU contains both IP and UDP/TCP headers.

"It is true that a typical IPv4 header is 20 bytes, and the UDP header is 8 bytes.
However it is possible to include IP options which can increase the size of the
IP header to as much as 60 bytes. In addition, sometimes it is necessary for
intermediate nodes to encapsulate datagrams inside of another protocol such as
IPsec (used for VPNs and the like) in order to route the packet to its destination.
So if you do not know the MTU on your particular network path, it is best to leave
a reasonable margin for other header information that you may not have anticipated."

IP options are used when, for example, a source route is specified,
where the sender requests a certain routing path. I don't thing we'll deal with this at the lab.

The IPsec headers can be really big. They're used to provide security.
I doubt if we'll ever deal with this so UDP header = 8 bytes on our networks.

IPv6 fixes the IP header size at 40 bytes.

So I think we can set payload size = MTU(1024) - 20 - 8 -LB -RE = 1024 - 28 - 28 = 968.


Michael's code does the following:

My components current recv 1024 bytes off the wire (not including udp/ip headers);
so udp payload = (sender payload + 12 + 16).
Thus max(sender payload) = udp payload- 28 = 1024 - 28 = 996


That means the programmatically in Carl's code, the MTU can be set by hand to 1024 + (996 - 968) = 1052.

Switching to IPv6 means decreasing payload by 20 additiona bytes.


