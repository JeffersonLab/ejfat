// Test setup for EJFAT emulation:

(parameter defaults on rhs of =)

-------------
Data Source:
-------------

tx=$(mktemp); cat <file> | pktzr_md -i <destination ip> -p <destination port=19522> -t <tick=1> -d <data_id=1> -n <num_data_ids=1>  2> $tx

the <num_data_ids> parm will determine how many replicates of the source data will be sent starting the vakue of the parm <data_id>


e.g.,

tx=$(mktemp); cat <file> | pktzr_md -i 129.57.29.231  2> $tx

the session log is in $tx


-------------
LB emulation:
-------------

tx=$(mktemp); lb_emu -i "<LB host ip>" -p <LB host reception port> -t "<destination ip>" -r <destination port> 2> $tx

the session log is in $tx

e.g.,

tx=$(mktemp); lb_emu -i "129.57.87.13" -p 19522 -t "129.57.87.14" -r 7777 2> $tx



An alternate LB emulation can be accomplished using the netcat command as follows:

nc -U –4 -u -l <LB host ip> <lb-port>  | nc -p <arb_port> –U –4 -u <destination-ip> <destination-port>

e.g.,

nc -U –4 -u -l <LB host ip> <lb-port>  | nc –U –4 -u <destination-ip> <destination-port>


Note that this does not remove the LB meta-data from the stream; attempting to do that with 

nc -U –4 -u -l 129.57.87.13 19522 | tail -c +13 | nc –U –4 -u 129.57.87.14 7777

fails. See netcat solution for Data Source above.



-------------
Data Sink:
-------------
(bash)

tx=$(mktemp); lb_rcv -i "<Data Sink ip>" -p <Data sink reception port>  >  <file> 2> $tx

e.g.,

t=$(mktemp); lb_rcv -i "129.57.87.14" -p 7777 > some_file_name 2> $tx


Note that stderr is being redirected to temp file $tx (in /tmp) and contains the session log

NOTE:  does not work reliably when spanning subsets!


An alternate Data Source can be accomplished using the netcat command as follows:

nc -u -w 1 -l <sink-ip> <sink-port> >  <file-with-first-12-bytes-stripped> 

e.g.,

nc -u -w 1 -l 129.57.87.14 7777 >  <file-with-first-12-bytes-stripped> 


Capabilities / Limitations (Bugs) / Next Steps:
- lb_emu currently routes traffic to a single destination
- 'netcat' (often soft-linked to 'nc') is not available on all systems, e.g., ifarm




